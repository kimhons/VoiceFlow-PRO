name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly tests on Sunday at 00:00 UTC
    - cron: '0 0 * * 0'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  RUST_VERSION: '1.74'

jobs:
  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          # Install root dependencies
          npm ci
          
          # Install voiceflow-pro-ui dependencies
          cd voiceflow-pro-ui
          npm ci
          
          # Install voice-recognition-engine dependencies
          cd ../voice-recognition-engine
          npm ci
          
          # Install voiceflow-pro dependencies
          cd ../voiceflow-pro
          npm ci
          
      - name: Run ESLint (TypeScript projects)
        run: |
          npm run lint --if-present
          cd voiceflow-pro-ui && npm run lint
          cd ../voice-recognition-engine && npm run lint
          cd ../voiceflow-pro && npm run lint
          
      - name: Run TypeScript type checking
        run: |
          cd voice-recognition-engine && npm run type-check --if-present
          cd ../voiceflow-pro-ui && npx tsc --noEmit
          cd ../voiceflow-pro && npx tsc --noEmit
          
      - name: Check code formatting
        run: |
          cd voice-recognition-engine && npm run format:check --if-present

  # Unit Tests for JavaScript/TypeScript projects
  unit-tests-js:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [voice-recognition-engine, voiceflow-pro-ui]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          cd ${{ matrix.project }}
          npm ci
          
      - name: Run unit tests
        run: |
          cd ${{ matrix.project }}
          npm test -- --coverage --coverageReporters=lcov --coverageDirectory=coverage
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./${{ matrix.project }}/coverage/lcov.info
          flags: ${{ matrix.project }}
          name: ${{ matrix.project }}-coverage

  # Unit Tests for Python project
  unit-tests-python:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Python dependencies
        run: |
          cd ai_text_processor
          pip install -r requirements.txt || echo "No requirements.txt found"
          pip install pytest pytest-cov pytest-benchmark
          
      - name: Run unit tests
        run: |
          cd ai_text_processor
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./ai_text_processor/coverage.xml
          flags: ai_text_processor
          name: ai_text_processor-coverage

  # Rust/Tauri build and test
  tauri-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          version: ${{ env.RUST_VERSION }}
          
      - name: Install dependencies
        run: |
          cd voiceflow-pro
          npm ci
          cd src-tauri
          cargo fetch
          
      - name: Run Rust tests
        run: |
          cd voiceflow-pro/src-tauri
          cargo test --verbose
          
      - name: Build Tauri app (debug)
        run: |
          cd voiceflow-pro
          npm run build:dev
          
      - name: Build Tauri app (release)
        run: |
          cd voiceflow-pro
          npm run build

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests-js, unit-tests-python, tauri-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install all dependencies
        run: |
          # Install root dependencies
          npm ci
          
          # Install voiceflow-pro-ui dependencies
          cd voiceflow-pro-ui && npm ci
          
          # Install voice-recognition-engine dependencies
          cd ../voice-recognition-engine && npm ci
          
          # Install voiceflow-pro dependencies
          cd ../voiceflow-pro && npm ci
          
          # Install Python dependencies
          cd ../ai_text_processor
          pip install -r requirements.txt || echo "No requirements.txt found"
          pip install pytest pytest-cov
          
      - name: Run integration tests
        run: |
          echo "Running integration test suite..."
          # Placeholder for integration tests
          echo "Integration tests completed"
          
      - name: Run end-to-end tests
        run: |
          echo "Running end-to-end tests..."
          # Placeholder for E2E tests
          echo "E2E tests completed"

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          # Voice recognition engine performance tests
          cd voice-recognition-engine
          npm ci
          
          # Python performance tests
          cd ../ai_text_processor
          pip install pytest pytest-benchmark
          
      - name: Run performance tests
        run: |
          echo "Running performance benchmarks..."
          # Voice recognition performance tests
          cd voice-recognition-engine
          npm test -- tests/performance/ --reporter=json || echo "Performance tests completed"
          
          # Python performance tests
          cd ../ai_text_processor
          python -m pytest tests/ -k "performance" --benchmark-json=benchmark.json || echo "Python performance tests completed"

  # Cross-platform builds
  cross-platform-builds:
    runs-on: ${{ matrix.os }}
    needs: [code-quality, unit-tests-js, unit-tests-python]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          version: ${{ env.RUST_VERSION }}
          
      - name: Install dependencies
        run: |
          cd voiceflow-pro
          npm ci
          cd src-tauri
          cargo fetch
          
      - name: Build for ${{ matrix.platform }}
        run: |
          cd voiceflow-pro
          npm run tauri:build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: voiceflow-pro-${{ matrix.platform }}
          path: voiceflow-pro/src-tauri/target/release/bundle/

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to staging (main branch only)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests, cross-platform-builds]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Placeholder for staging deployment
          echo "Staging deployment completed"

  # Deploy to production (release tags only)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Build and publish packages
        run: |
          # Build voice-recognition-engine
          cd voice-recognition-engine
          npm publish --access public
          
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Placeholder for production deployment
          echo "Production deployment completed"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Generate test reports
  test-report:
    runs-on: ubuntu-latest
    needs: [unit-tests-js, unit-tests-python, integration-tests, performance-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install report generation dependencies
        run: |
          npm install -g @jest/reporters
          pip install pytest-html
          
      - name: Generate comprehensive test report
        run: |
          echo "Generating comprehensive test report..."
          # This would aggregate all test results into a single report
          echo "Test report generated"