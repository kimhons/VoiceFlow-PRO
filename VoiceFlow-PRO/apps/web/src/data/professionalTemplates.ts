// Built-in Professional Templates for VoiceFlow Pro

import { NoteTemplate, ProfessionalMode } from '@/types';

// Medical Templates
export const medicalTemplates: NoteTemplate[] = [
  {
    id: 'medical-soap-note',
    name: 'SOAP Note',
    description: 'Standard SOAP (Subjective, Objective, Assessment, Plan) format for patient consultations',
    mode: 'medical',
    structure: [
      {
        id: 'patient-info',
        title: 'Patient Information',
        placeholder: 'Patient name, ID, date of visit...',
        required: true,
        order: 1,
        type: 'structured',
        aiGuidance: 'Extract patient demographics and visit information',
      },
      {
        id: 'chief-complaint',
        title: 'Chief Complaint',
        placeholder: 'Primary reason for visit...',
        required: true,
        order: 2,
        type: 'text',
        aiGuidance: 'Identify the main complaint or reason for consultation',
      },
      {
        id: 'subjective',
        title: 'Subjective',
        placeholder: 'Patient history, symptoms, concerns in their own words...',
        required: true,
        order: 3,
        type: 'freeform',
        aiGuidance: 'Capture patient-reported symptoms, history, and concerns',
      },
      {
        id: 'objective',
        title: 'Objective',
        placeholder: 'Physical examination findings, vital signs, test results...',
        required: true,
        order: 4,
        type: 'structured',
        aiGuidance: 'Document measurable findings, vital signs, and examination results',
      },
      {
        id: 'assessment',
        title: 'Assessment',
        placeholder: 'Diagnosis, differential diagnoses...',
        required: true,
        order: 5,
        type: 'list',
        aiGuidance: 'List diagnoses and clinical impressions',
      },
      {
        id: 'plan',
        title: 'Plan',
        placeholder: 'Treatment plan, medications, follow-up...',
        required: true,
        order: 6,
        type: 'structured',
        aiGuidance: 'Document treatment plan, prescriptions, and follow-up instructions',
      },
    ],
    formatting: {
      style: 'professional',
      structure: 'sections',
      terminology: 'medical',
      autoFormat: true,
      includeTimestamps: true,
      includeSpeakerLabels: true,
    },
    aiPrompt: 'Format this medical consultation into a SOAP note with proper medical terminology and structure. Ensure HIPAA compliance by focusing on clinical information.',
  },
  {
    id: 'medical-progress-note',
    name: 'Progress Note',
    description: 'Follow-up visit documentation',
    mode: 'medical',
    structure: [
      {
        id: 'visit-date',
        title: 'Visit Date & Time',
        placeholder: 'Date and time of follow-up...',
        required: true,
        order: 1,
        type: 'text',
      },
      {
        id: 'interval-history',
        title: 'Interval History',
        placeholder: 'Changes since last visit...',
        required: true,
        order: 2,
        type: 'freeform',
      },
      {
        id: 'current-status',
        title: 'Current Status',
        placeholder: 'Current condition and response to treatment...',
        required: true,
        order: 3,
        type: 'freeform',
      },
      {
        id: 'plan-update',
        title: 'Updated Plan',
        placeholder: 'Modifications to treatment plan...',
        required: true,
        order: 4,
        type: 'structured',
      },
    ],
    formatting: {
      style: 'professional',
      structure: 'sections',
      terminology: 'medical',
      autoFormat: true,
      includeTimestamps: true,
      includeSpeakerLabels: false,
    },
  },
];

// Developer Templates
export const developerTemplates: NoteTemplate[] = [
  {
    id: 'dev-bug-report',
    name: 'Bug Report',
    description: 'Structured bug report with reproduction steps',
    mode: 'developer',
    structure: [
      {
        id: 'bug-title',
        title: 'Bug Title',
        placeholder: 'Brief description of the bug...',
        required: true,
        order: 1,
        type: 'text',
      },
      {
        id: 'description',
        title: 'Description',
        placeholder: 'Detailed description of the issue...',
        required: true,
        order: 2,
        type: 'freeform',
      },
      {
        id: 'reproduction-steps',
        title: 'Steps to Reproduce',
        placeholder: '1. Step one\n2. Step two...',
        required: true,
        order: 3,
        type: 'numbered',
      },
      {
        id: 'expected-behavior',
        title: 'Expected Behavior',
        placeholder: 'What should happen...',
        required: true,
        order: 4,
        type: 'text',
      },
      {
        id: 'actual-behavior',
        title: 'Actual Behavior',
        placeholder: 'What actually happens...',
        required: true,
        order: 5,
        type: 'text',
      },
      {
        id: 'environment',
        title: 'Environment',
        placeholder: 'OS, browser, version, etc...',
        required: false,
        order: 6,
        type: 'structured',
      },
      {
        id: 'code-snippets',
        title: 'Code Snippets',
        placeholder: 'Relevant code...',
        required: false,
        order: 7,
        type: 'freeform',
      },
    ],
    formatting: {
      style: 'technical',
      structure: 'sections',
      terminology: 'technical',
      autoFormat: true,
      includeTimestamps: false,
      includeSpeakerLabels: false,
    },
    aiPrompt: 'Format this into a clear bug report with proper technical terminology and structure.',
  },
  {
    id: 'dev-feature-spec',
    name: 'Feature Specification',
    description: 'Feature requirements and technical specification',
    mode: 'developer',
    structure: [
      {
        id: 'feature-name',
        title: 'Feature Name',
        placeholder: 'Name of the feature...',
        required: true,
        order: 1,
        type: 'text',
      },
      {
        id: 'overview',
        title: 'Overview',
        placeholder: 'High-level description...',
        required: true,
        order: 2,
        type: 'freeform',
      },
      {
        id: 'requirements',
        title: 'Requirements',
        placeholder: 'Functional and non-functional requirements...',
        required: true,
        order: 3,
        type: 'list',
      },
      {
        id: 'technical-approach',
        title: 'Technical Approach',
        placeholder: 'Implementation details...',
        required: true,
        order: 4,
        type: 'freeform',
      },
      {
        id: 'dependencies',
        title: 'Dependencies',
        placeholder: 'Required libraries, services, etc...',
        required: false,
        order: 5,
        type: 'list',
      },
      {
        id: 'testing-strategy',
        title: 'Testing Strategy',
        placeholder: 'How to test this feature...',
        required: false,
        order: 6,
        type: 'freeform',
      },
    ],
    formatting: {
      style: 'technical',
      structure: 'sections',
      terminology: 'technical',
      autoFormat: true,
      includeTimestamps: false,
      includeSpeakerLabels: false,
    },
  },
  {
    id: 'dev-code-review',
    name: 'Code Review Notes',
    description: 'Code review feedback and suggestions',
    mode: 'developer',
    structure: [
      {
        id: 'pr-title',
        title: 'PR/Commit',
        placeholder: 'Pull request or commit reference...',
        required: true,
        order: 1,
        type: 'text',
      },
      {
        id: 'summary',
        title: 'Summary',
        placeholder: 'Overall assessment...',
        required: true,
        order: 2,
        type: 'freeform',
      },
      {
        id: 'positive-feedback',
        title: 'Strengths',
        placeholder: 'What was done well...',
        required: false,
        order: 3,
        type: 'list',
      },
      {
        id: 'issues',
        title: 'Issues Found',
        placeholder: 'Problems that need to be addressed...',
        required: false,
        order: 4,
        type: 'list',
      },
      {
        id: 'suggestions',
        title: 'Suggestions',
        placeholder: 'Improvements and recommendations...',
        required: false,
        order: 5,
        type: 'list',
      },
    ],
    formatting: {
      style: 'technical',
      structure: 'mixed',
      terminology: 'technical',
      autoFormat: true,
      includeTimestamps: false,
      includeSpeakerLabels: false,
    },
  },
];

// Business Templates
export const businessTemplates: NoteTemplate[] = [
  {
    id: 'business-meeting-minutes',
    name: 'Meeting Minutes',
    description: 'Structured meeting notes with action items',
    mode: 'business',
    structure: [
      {
        id: 'meeting-info',
        title: 'Meeting Information',
        placeholder: 'Date, time, attendees, location...',
        required: true,
        order: 1,
        type: 'structured',
      },
      {
        id: 'agenda',
        title: 'Agenda',
        placeholder: 'Topics discussed...',
        required: true,
        order: 2,
        type: 'list',
      },
      {
        id: 'discussion',
        title: 'Discussion Points',
        placeholder: 'Key points from discussion...',
        required: true,
        order: 3,
        type: 'freeform',
      },
      {
        id: 'decisions',
        title: 'Decisions Made',
        placeholder: 'Decisions and outcomes...',
        required: true,
        order: 4,
        type: 'list',
      },
      {
        id: 'action-items',
        title: 'Action Items',
        placeholder: 'Tasks, owners, deadlines...',
        required: true,
        order: 5,
        type: 'structured',
        aiGuidance: 'Extract action items with assignees and deadlines',
      },
      {
        id: 'next-steps',
        title: 'Next Steps',
        placeholder: 'Follow-up actions...',
        required: false,
        order: 6,
        type: 'list',
      },
    ],
    formatting: {
      style: 'professional',
      structure: 'sections',
      terminology: 'business',
      autoFormat: true,
      includeTimestamps: true,
      includeSpeakerLabels: true,
    },
    aiPrompt: 'Format this meeting transcription into structured meeting minutes with clear action items and decisions.',
  },
];

// Export all templates by mode
export const templatesByMode: Record<ProfessionalMode, NoteTemplate[]> = {
  general: [],
  medical: medicalTemplates,
  developer: developerTemplates,
  legal: [],
  business: businessTemplates,
  education: [],
  journalism: [],
  creative: [],
};

export function getTemplatesForMode(mode: ProfessionalMode): NoteTemplate[] {
  return templatesByMode[mode] || [];
}

